// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  walletAddress     String?            @unique
  password          String?            @db.Text
  location          String?
  tokens            Float               @default(0)
  role              String             @default("USER")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  sessions          Session[]
  submissions       Submission[]
  verificationCodes VerificationCode[]
  verifiedSubmissions Submission[]      @relation("Verification")
  tokenTransactions  TokenTransaction[]
  achievements       UserAchievement[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expires   DateTime
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  
  @@unique([email, code])
}

model Submission {
  id              String   @id @default(cuid())
  userId          String
  wasteType       String
  quantity        Float
  unit            String
  status          String   @default("PENDING")
  tokensAwarded   Float    @default(0)
  location        String?
  description     String?
  images          String[]
  verifiedById    String?
  verifiedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  verifiedBy      User?    @relation("Verification", fields: [verifiedById], references: [id])
}

model CollectionCenter {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  latitude    Float
  longitude   Float
  contact     String?
  hours       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        String   // EARNED, SPENT, TRANSFERRED
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id               String             @id @default(cuid())
  name             String
  description      String
  icon             String
  criteria         Json               // Criteria to unlock this achievement
  xpReward         Int                @default(10)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  @@unique([userId, achievementId])
}
